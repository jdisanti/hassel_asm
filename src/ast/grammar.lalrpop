#![allow(unknown_lints)]
#![allow(clippy)]

use std::str::FromStr;
use std::sync::Arc;
use src_tag::SrcTag;
use lalrpop_util::ErrorRecovery;

use ast::{Number, Term, Operand, OperandModifier, MetaInstruction, Statement};

grammar<'err>(src_unit: usize, errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);

match {
    r";[^\n]*",
    r"[A-Z]{3}",
} else {
    _
}

Comment: () = {
    r";[^\n]*"
};

Str: Arc<String> = {
    r"\x22(?:[^\x22\\]|\\.)*\x22" => {
        let val = <>;
        let len = val.len();
        Arc::new(String::from_str(&val[1..len-1]).unwrap())
    }
};

Name: Arc<String> = {
    r"[a-zA-Z_][\w]*" => Arc::new(String::from_str(<>).unwrap())
};

Label: Arc<String> = {
    r"[a-zA-Z_][\w]*:" => {
        let lbl = <>;
        Arc::new(String::from_str(&lbl[0..lbl.len()-1]).unwrap())
    }
};

Instruction: Arc<String> = {
    r"[A-Z]{3}" => Arc::new(String::from_str(<>).unwrap())
};

Number: Number = {
    // Base 10
    <s:r"[0-9]+"> => {
        let val = u32::from_str(s).unwrap();
        if val <= 0xFF {
            Number::Byte(val as u8)
        } else if val <= 0xFFFF {
            Number::Word(val as u16)
        } else {
            Number::Invalid(val as usize)
        }
    },
    // Base 16
    <s:r"\$[0-9A-Fa-f]+"> => {
        let val = u32::from_str_radix(&s[1..], 16).unwrap();
        if val <= 0xFF {
            Number::Byte(val as u8)
        } else if val <= 0xFFFF {
            Number::Word(val as u16)
        } else {
            Number::Invalid(val as usize)
        }
    },
};

NumberCommaList: Vec<Number> = {
    <l:NumberCommaList> "," <n:Number> => {
        let mut result = l;
        result.push(n);
        result
    },
    Number => vec![<>],
};

Term: Term = {
    <st:@L> <n:Number> => Term::Number(SrcTag::new(src_unit, st), n),
    <st:@L> <n:Name> => Term::Name(SrcTag::new(src_unit, st), n),
};

Operand: Operand = {
    "#" <t:Term> => Operand::Immediate(OperandModifier::None, t),
    "#" ">" <t:Term> => Operand::Immediate(OperandModifier::HighByte, t),
    "#" "<" <t:Term> => Operand::Immediate(OperandModifier::LowByte, t),
    "#" "HI" "(" <t:Term> ")" => Operand::Immediate(OperandModifier::HighByte, t),
    "#" "LO" "(" <t:Term> ")" => Operand::Immediate(OperandModifier::LowByte, t),
    <t:Term> => Operand::Address(OperandModifier::None, t),
    ">" <t:Term> => Operand::Address(OperandModifier::HighByte, t),
    "<" <t:Term> => Operand::Address(OperandModifier::LowByte, t),
    "HI" "(" <t:Term> ")" => Operand::Address(OperandModifier::HighByte, t),
    "LO" "(" <t:Term> ")" => Operand::Address(OperandModifier::LowByte, t),
    <t:Term> "," "X" => Operand::AbsoluteX(t),
    <t:Term> "," "Y" => Operand::AbsoluteY(t),
    "(" <t:Term> "," "X" ")" => Operand::IndirectX(t),
    "(" <t:Term> ")" "," "Y" => Operand::IndirectY(t),
    "(" <t:Term> ")" => Operand::Indirect(t),
};

MetaInstruction: MetaInstruction = {
    <st:@L> ".org" <n:Number> => MetaInstruction::Org(SrcTag::new(src_unit, st), n),
    <st:@L> ".pad" <n:Number> => MetaInstruction::Pad(SrcTag::new(src_unit, st), n),
    <st:@L> ".byte" <l:NumberCommaList> => MetaInstruction::Byte(SrcTag::new(src_unit, st), l),
    <st:@L> ".word" <l:NumberCommaList> => MetaInstruction::Word(SrcTag::new(src_unit, st), l),
    <st:@L> ".vector" <n:Name> => MetaInstruction::Vector(SrcTag::new(src_unit, st), n),
    <st:@L> ".include" <s:Str> => MetaInstruction::Include(SrcTag::new(src_unit, st), s),
};

Statement: Statement = {
    Comment => Statement::Comment,
    <st:@L> <i:Instruction> => Statement::Instruction(SrcTag::new(src_unit, st), i, Operand::None),
    <st:@L> <i:Instruction> <o:Operand> => Statement::Instruction(SrcTag::new(src_unit, st), i, o),
    <m:MetaInstruction> => Statement::MetaInstruction(m),
    <st:@L> <l:Label> => Statement::Label(SrcTag::new(src_unit, st), l),
};

pub Program: Vec<Statement> = {
    <p:Program> <s:Statement> => {
        let mut result = p;
        result.push(s);
        result
    },
    Statement => vec![<>],
};
